package ${package.Controller};


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiOperation;
#end

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * $!{table.comment} 前端控制器
 *
 * @author ${author}
 * @since ${date}
 */
#if(${swagger2})
@Api("${table.controllerName} 前端控制器接口文档")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${table.controllerName})/${table.controllerName}#end#if(${controllerMappingHyphenStyle})#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private static final Logger LOGGER = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    private ${table.serviceName} service;

    @ApiOperation(value="插入或修改", notes="插入或修改", produces="application/json")
    @RequestMapping(value = "/save",method = RequestMethod.POST)
    public String saveOrUpdate(${entity} obj){
        service.saveOrUpdate(obj);
        LOGGER.info("saveOrUpdate success...");
        return "saveOrUpdate success...";
    }

    @ApiOperation(value="根据条件进行分页查询", notes="根据条件进行分页查询", produces="application/json")
    @RequestMapping(value = "/findPageByCondition",method = RequestMethod.POST)
    public IPage<${entity}> findPageByCondition(${entity} obj){
        Page<${entity}> page = new Page<${entity}>();
        IPage<${entity}> iPage = service.selectPageByCondition(page, obj);
        LOGGER.info("findPageByCondition success...");
        return iPage;
    }
}

#end