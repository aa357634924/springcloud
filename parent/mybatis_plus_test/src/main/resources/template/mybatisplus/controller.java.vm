package ${package.Controller};


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.alibaba.druid.util.StringUtils;
import java.util.Arrays;
import java.util.List;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiOperation;
#end

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * $!{table.comment} 前端控制器
 *
 * @author ${author}
 * @since ${date}
 */
#if(${swagger2})
@Api("${table.controllerName} 前端控制器接口文档")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
##@RequestMapping("#if(${table.controllerName})/${table.controllerName}#end#if(${controllerMappingHyphenStyle})#else${table.entityPath}#end")
@RequestMapping("/${table.entityPath}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end

private static final Logger LOGGER = LoggerFactory.getLogger(${table.controllerName}.class);

@Autowired
private ${table.serviceName} service;

@ApiOperation(value="插入或修改", notes="插入或修改", produces="application/json")
@RequestMapping(value = "/save",method = RequestMethod.POST)
public String saveOrUpdate(${entity} obj){
        service.saveOrUpdate(obj);
        LOGGER.info("saveOrUpdate success...");
        return "saveOrUpdate success...";
        }

@ApiOperation(value="根据条件进行查询-分页（会查询出逻辑删除掉的数据）", notes="根据条件进行查询-分页（会查询出逻辑删除掉的数据）", produces="application/json")
@RequestMapping(value = "/findPageByCondition",method = RequestMethod.POST)
public IPage<${entity}> findPageByCondition(${entity} obj){
        Page<${entity}> page = new Page<${entity}>();
        IPage<${entity}> iPage = service.selectPageByCondition(page, obj);
        LOGGER.info("findPageByCondition success...");
        return iPage;
        }

@ApiOperation(value="根据条件进行查询-分页（不会查询出逻辑删除掉的数据）", notes="根据条件进行查询-分页（不会查询出逻辑删除掉的数据）", produces="application/json")
@RequestMapping(value = "/findByCondition",method = RequestMethod.POST)
public Page<${entity}> findByCondition(${entity} obj){
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
##        queryWrapper.like("username",obj.getUsername());
        Page<${entity}> page = service.page(new Page<${entity}>(), queryWrapper);
        LOGGER.info("findByCondition success...");
        return page;
        }

@ApiOperation(value="根据条件进行查询-不分页（会查询出逻辑删除掉的数据）", notes="根据条件进行查询-不分页（会查询出逻辑删除掉的数据）", produces="application/json")
@RequestMapping(value = "/findListByCondition",method = RequestMethod.POST)
public List<${entity}> findListByCondition(${entity} obj){
        List<${entity}> list = service.selectList(obj);
        LOGGER.info("findListByCondition success...");
        return list;
        }

@ApiOperation(value="根据ID删除数据", notes="根据ID删除数据", produces="application/json")
@RequestMapping(value = "/deleteById",method = RequestMethod.POST)
public String deleteById(String id){
        service.removeById(id);
        LOGGER.info("deleteById success...");
        return "deleteById success";
        }

@ApiOperation(value="根据ID拼接的字符串批量删除数据", notes="根据ID拼接的字符串批量删除数据", produces="application/json")
@RequestMapping(value = "/deleteByIds",method = RequestMethod.POST)
public String deleteByIds(String ids){
        if(StringUtils.isEmpty(ids)){
        return "ids为空，未删除任何数据";
        }
        String[] idArr = ids.split(",");
        service.removeByIds(Arrays.asList(idArr));
        LOGGER.info("deleteById success...");
        return "deleteById success";
        }
        }

#end